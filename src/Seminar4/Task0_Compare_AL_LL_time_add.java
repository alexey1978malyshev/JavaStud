package Seminar4;
/*üìå 1) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ ArrayList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
üìå 2) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ LinkedList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
–°—Ä–∞–≤–Ω–∏—Ç–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º.*/

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class Task0_Compare_AL_LL_time_add {


    public static void main(String[] args) {
        int len = 100000;
        long getTimeAL = getArayListAddLast(len);
        long getTimeLL = getLinkedListAddLast(len);
        System.out.println("–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü ArrayList - " + getTimeAL);
        System.out.println("–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü LinkedList - " + getTimeLL);
        long getTimeALFirst = getArayListAddFirst(len);
        long getTimeLLFirst = getLinkedListAddFirst(len);
        System.out.println("–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ ArrayList - " + getTimeALFirst);
        System.out.println("–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ LinkedList - " + getTimeLLFirst);
        long getTimeALMid = getArayListAddMid(len);
        long getTimeLLMid = getLinkedListAddMid(len);
        System.out.println("–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–µ—Ä–µ–¥–∏–Ω—É ArrayList - " + getTimeALMid);
        System.out.println("–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–µ—Ä–µ–¥–∏–Ω—É LinkedList - " + getTimeLLMid);



    }

    private static long getArayListAddLast(int len) {
        List<Integer> arrayList = new ArrayList<>();
        long start = System.currentTimeMillis();
        for (int i = 0; i < len; i++) {
            arrayList.add(i);
        }
        long end = System.currentTimeMillis() - start;
        return end;
    }

    private static long getLinkedListAddLast(int len) {
        List<Integer> linkList = new LinkedList<>();
        long start = System.currentTimeMillis();
        for (int i = 0; i < len; i++) {
            linkList.add(i);
        }
        long end = System.currentTimeMillis() - start;
        return end;
    }

    private static long getArayListAddFirst(int len) {
        List<Integer> arrayList = new ArrayList<>();
        long start = System.currentTimeMillis();
        for (int i = 0; i < len; i++) {
            arrayList.add(0, i);
        }
        long end = System.currentTimeMillis() - start;
        return end;
    }

    private static long getLinkedListAddFirst(int len) {
        List<Integer> linkList = new LinkedList<>();
        long start = System.currentTimeMillis();
        for (int i = 0; i < len; i++) {
            linkList.add(0, i);
        }
        long end = System.currentTimeMillis() - start;
        return end;
    }

    private static long getArayListAddMid(int len) {
        List<Integer> arrayList = new ArrayList<>();
        long start = System.currentTimeMillis();
        for (int i = 0; i < len; i++) {
            if (arrayList.size() > 10) {
                arrayList.add(10, i);
            }
            arrayList.add(i);
        }
        long end = System.currentTimeMillis() - start;
        return end;
    }

    private static long getLinkedListAddMid(int len) {
        List<Integer> linkList = new LinkedList<>();
        long start = System.currentTimeMillis();
        for (int i = 0; i < len; i++) {
            if (linkList.size() > 10) {
                linkList.add(10, i);
            }
            linkList.add(i);
        }
        long end = System.currentTimeMillis() - start;
        return end;
    }
}
