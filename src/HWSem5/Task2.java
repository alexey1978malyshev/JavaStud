package HWSem5;
/* üìå –ü—É—Å—Ç—å –¥–∞–Ω —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤, –ü—ë—Ç—Ä –ü–µ—Ç—Ä–æ–≤ –∏ –¥—Ä.
–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–π–¥–µ—Ç –∏ –≤—ã–≤–µ–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞
—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π. –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏*/

import com.sun.source.tree.Tree;

import java.util.*;

public class Task2 {
    public static void main(String[] args) {
        ArrayList<String> employersList = new ArrayList<>();
        employersList.add("–ö—É–∑—å–º–∏–Ω –ê.–í.");
        employersList.add("–°–µ—Ä–≥–µ–µ–≤ –°.–ê.");
        employersList.add("–ü–µ—Ç—Ä–æ–≤ –ü.–£.");
        employersList.add("–ö—É–∑—å–º–∏–Ω –ê.–í.");
        employersList.add("–ü–µ—Ç—Ä–æ–≤ –ü.–£.");
        employersList.add("–ö—É–∫—É—à–∫–∏–Ω–∞ –Æ.–ü.");
        employersList.add("–ö—É–∑—å–º–∏–Ω –ê.–í.");
        employersList.add("–°–µ—Ä–≥–µ–µ–≤ –°.–ê.");
        employersList.add("–ö—É–∫—É—à–∫–∏–Ω–∞ –Æ.–ü.");
        employersList.add("–ü–µ—Ç—Ä–æ–≤ –ü.–£.");
        employersList.add("–ò–≤–∞–Ω–æ–≤ –ò.–ê.");
        employersList.add("–ö—É–∑–Ω–µ—Ü–æ–≤ –ö.–ö.");
        employersList.add("–Ø–∫–æ–≤–ª–µ–≤ –ê.–ú.");
        employersList.add("–ê–Ω—Ç–æ–Ω–æ–≤ –ê.–ü.");
        employersList.add("–ö—É–∑—å–º–∏–Ω –ê.–í.");
        employersList.add("–ö—É–∫—É—à–∫–∏–Ω–∞ –Æ.–ü.");
        employersList.add("–ö—É–∫—É—à–∫–∏–Ω–∞ –Æ.–ü.");
        employersList.add("–ö—É–∫—É—à–∫–∏–Ω–∞ –Æ.–ü.");

        getAndDeleteMaxFromHashMap(counterOfInsertInLst(employersList));

    }
    private static void getAndDeleteMaxFromHashMap(Map<String, Integer> dict){
        while (!dict.isEmpty()) {
            Map.Entry<String, Integer> maxEntry = Collections.max(dict.entrySet(), Map.Entry.comparingByValue());
            System.out.println(maxEntry);
            dict.remove(maxEntry.getKey());
        }
    }
    private static Map<String, Integer> counterOfInsertInLst( ArrayList<String> lst){
        int counter = 1;
        Map<String, Integer> empValue = new HashMap<>();
        Collections.sort(lst);
        System.out.println(lst);
        String currEmployer = lst.get(0);
        for (int i = 1; i < lst.size(); i++) {
            String compareEmp = lst.get(i);
            if (currEmployer.equals(compareEmp)) {
                counter++;
            } else {
                if (counter > 1) empValue.put(lst.get(i - 1), counter);
                counter = 1;
                currEmployer = compareEmp;
            }
        }
        if (counter > 1) empValue.put(currEmployer, counter);
        return empValue;
    }
}
